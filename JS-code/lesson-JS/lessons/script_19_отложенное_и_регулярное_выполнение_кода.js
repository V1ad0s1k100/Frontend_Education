// С помощью setTimeout откладываем выполнение функции на 1 секунду.
// Через 1 секунду вызывается функция, которая выводит в консоль уведомление.
setTimeout(() => {
  console.log(
    'Это уведомление отображается спустя 2 секунды после загрузки страницы', // вывод в консоль
  )
}, 1000)

// Объявляем функцию logMessage с двумя параметрами: name и age.
// Эта функция выводит в консоль сообщение с именем и возрастом.
const logMessage = (name, age) => {
  console.log(`Меня зовут ${name} и мне ${age}`)
}

// Используя setTimeout, планируем вызов logMessage через 2 секунды с передачей аргументов 'Вася' и 12.
const timerID = setTimeout(logMessage, 2000, 'Вася', 12)

// Функция clearTimeout отменяет выполнение запланированного вызова logMessage.
// В данном случае logMessage не будет вызвана, так как таймер отменяется.
clearTimeout(timerID)

// setInterval вызывает функцию, которая выводит "Привет!" в консоль каждую секунду.
const intervalID = setInterval(() => {
  console.log('Привет!')
}, 1000)

// Через 5 секунд планируется отмена интервала. После этого больше не будут выводиться сообщения "Привет!".
setTimeout(() => {
  clearInterval(intervalID)
}, 5000)

// Пример реализации рекурсии с помощью setTimeout.
// Эта часть показывает как можно использовать рекурсивный вызов для периодического выполнения кода.

// setTimeout(function logMessageOne() {
//   alert('Сообщение раз в 1 секунду')
//   setTimeout(logMessageOne, 1000)
// }, 1000)

// Пример, показывающий, что даже если задержка для setTimeout = 0, выполнение кода всё равно происходит в конце очереди макрозадач.

// Выводим сообщение №1 в консоль.
console.log('Сообщение №1')

// Планируем вывод сообщения №2 через 10 миллисекунд.
setTimeout(() => {
  console.log('Сообщение №2')
}, 10)

// Выводим сообщение №3 в консоль.
console.log('Сообщение №3')

/*
Консоль:
1. Сначала выведется "Сообщение №1", так как это синхронный вызов.
2. Затем выведется "Сообщение №3", тоже синхронно.
3. После выполнения синхронного кода, событие из setTimeout с задержкой 10 мс попадёт в очередь и выведется "Сообщение №2".
4. Функция, назначенная для setTimeout с задержкой 1 сек, выведет сообщение об уведомлении, но из-за некорректного комментария к сообщению ("спустя 2 секунды") – возможно, описание не соответствует задержке.
5. Функция logMessage планировалась через 2 сек, но была отменена через clearTimeout.
6. Каждую секунду выводится "Привет!" в консоль, но через 5 сек таймер setInterval отменяется.
*/
